// <auto-generated />
using System;
using ECommerce.Modules.Sales.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.Modules.Sales.Infrastructure.EF.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    [Migration("20220401203156_Sales_Module_AddedValueObjectsToEntities")]
    partial class Sales_Module_AddedValueObjectsToEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sales")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Currencies.Entities.CurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("date");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(14, 4)
                        .HasColumnType("numeric(14,4)");

                    b.Property<DateOnly>("RateDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("CurrencyCode", "Created")
                        .IsUnique();

                    b.ToTable("CurrencyRates", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.ItemSales.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Items", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.ItemSales.Entities.ItemSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Cost")
                        .HasPrecision(14, 4)
                        .HasColumnType("numeric(14,4)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ItemSales", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.ItemCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("ItemCarts", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateOrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("OrderApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Orders", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemCartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemCartId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Payments.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentNumber")
                        .IsUnique();

                    b.ToTable("Payments", "sales");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.ItemSales.Entities.ItemSale", b =>
                {
                    b.HasOne("ECommerce.Modules.Sales.Domain.ItemSales.Entities.Item", "Item")
                        .WithOne("ItemSale")
                        .HasForeignKey("ECommerce.Modules.Sales.Domain.ItemSales.Entities.ItemSale", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.ItemCart", b =>
                {
                    b.OwnsOne("ECommerce.Modules.Sales.Domain.Orders.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ItemCartId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasPrecision(14, 4)
                                .HasColumnType("numeric(14,4)")
                                .HasColumnName("Cost");

                            b1.HasKey("ItemCartId");

                            b1.ToTable("ItemCarts", "sales");

                            b1.WithOwner()
                                .HasForeignKey("ItemCartId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.Order", b =>
                {
                    b.OwnsOne("ECommerce.Modules.Sales.Domain.Orders.Common.ValueObjects.Currency", "Currency", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("CurrencyCode");

                            b1.Property<decimal>("Rate")
                                .HasPrecision(14, 4)
                                .HasColumnType("numeric(14,4)")
                                .HasColumnName("Rate");

                            b1.HasKey("OrderId");

                            b1.HasIndex("CurrencyCode");

                            b1.ToTable("Orders", "sales");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("ECommerce.Modules.Sales.Domain.Orders.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasPrecision(14, 4)
                                .HasColumnType("numeric(14,4)")
                                .HasColumnName("Cost");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "sales");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Currency")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerce.Modules.Sales.Domain.Orders.Entities.ItemCart", "ItemCart")
                        .WithOne("OrderItem")
                        .HasForeignKey("ECommerce.Modules.Sales.Domain.Orders.Entities.OrderItem", "ItemCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Modules.Sales.Domain.Orders.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("ECommerce.Modules.Sales.Domain.Orders.Common.ValueObjects.Currency", "Currency", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("CurrencyCode");

                            b1.Property<decimal>("Rate")
                                .HasPrecision(14, 4)
                                .HasColumnType("numeric(14,4)")
                                .HasColumnName("Rate");

                            b1.HasKey("OrderItemId");

                            b1.HasIndex("CurrencyCode");

                            b1.ToTable("OrderItems", "sales");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.OwnsOne("ECommerce.Modules.Sales.Domain.Orders.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .HasPrecision(14, 4)
                                .HasColumnType("numeric(14,4)")
                                .HasColumnName("Cost");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems", "sales");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Currency")
                        .IsRequired();

                    b.Navigation("ItemCart");

                    b.Navigation("Order");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Payments.Entities.Payment", b =>
                {
                    b.HasOne("ECommerce.Modules.Sales.Domain.Orders.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.ItemSales.Entities.Item", b =>
                {
                    b.Navigation("ItemSale");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.ItemCart", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ECommerce.Modules.Sales.Domain.Orders.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
